#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        ORG     01C00h                  ; set starting point for ram

losValores      dw 1,3,5,6,7,5,3,2,4,6,9,7,5,4,3

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack

main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer

        call    #elMayor                 ; call subroutine
        
        JMP $                           ; jump to current location '$'
                                        ; (endless loop)
        NOP
        
elMayor:
        mov.w   losValores, R7          ; value at losValores[0] stored in R7
        mov.w   #2, R6                  ; using R6 as iterator (we start at #2 due to the fact that it's a word, a byte would be #1

nextValue:
        mov.w   losValores(R6), R8      ; Debugging 
        cmp     losValores(R6), R7      ; make comparison between max value and current value
        jge     noChange                ; if R7 >= to current value do nothing
        mov.w   losValores(R6), R7      ; else change max value with current
        
noChange:
        incd.w   R6                     ; increase by two
        cmp.w   #32, R6                 ; if it passes #15 (array size) it's done
        jlo     nextValue
        ret
        
        END
